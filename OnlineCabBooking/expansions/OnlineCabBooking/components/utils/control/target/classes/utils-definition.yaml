openapi: 3.0.0
info:
  version: '1.0'
  title: utils component interface
  expanderComment: 'expanded with nsx-expanders:5.12.1, expansionResource net.democritus:Expanders:5.12.1'
  #anchor:custom-info:start
  #anchor:custom-info:end
#anchor:custom-root:start
#anchor:custom-root:end
paths:
  /execution-search-json:
    get:
      summary: 'get execution instances by {searchMethod}'
      description: execution instances are searchable by different search methods, which require different details
      operationId: 'get execution instances by {searchMethod}'
      parameters:
        - name: searchMethod
          in: query
          required: true
          schema:
            type: string
            enum:
              - findAllExecutions
              - findByNameEq
              - findByElementEq
        - name: projection
          in: query
          schema:
              type: string
              default: details
          examples:
              details:
                  value: details
                  summary: details projection shows all fields

              info:
                  value: info
                  summary: this projections shows [ name component element packageName  ]

              dataRef:
                  value: dataRef
                  summary: this projections shows [   ]

        - name: page
          in: query
          schema:
             type: integer
             default: 0
             format: int32
        - name: perpage
          in: query
          schema:
              type: integer
              default: 10
              format: int32
        - name: details
          in: query
          schema:
              type: string
              enum:
                  - details.name={yourname}

                  - details.element={yourelement}

        - name: sortFields
          in: query
          schema:
              type: string
              enum:
                  - sortFields[0].fieldName=name&sortFields[0].ascending=oneOf{true, false}
                  - sortFields[0].fieldName=name&sortFields[0].descending=oneOf{true, false}
                  - sortFields[1].fieldName=component&sortFields[1].ascending=oneOf{true, false}
                  - sortFields[1].fieldName=component&sortFields[1].descending=oneOf{true, false}
                  - sortFields[2].fieldName=element&sortFields[2].ascending=oneOf{true, false}
                  - sortFields[2].fieldName=element&sortFields[2].descending=oneOf{true, false}
                  - sortFields[3].fieldName=packageName&sortFields[3].ascending=oneOf{true, false}
                  - sortFields[3].fieldName=packageName&sortFields[3].descending=oneOf{true, false}
      responses:
          '200':
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ExecutionGeneratedResponse'

  /idCounter-search-json:
    get:
      summary: 'get idCounter instances by {searchMethod}'
      description: idCounter instances are searchable by different search methods, which require different details
      operationId: 'get idCounter instances by {searchMethod}'
      parameters:
        - name: searchMethod
          in: query
          required: true
          schema:
            type: string
            enum:
              - findAllIdCounters
              - findByNameEq
        - name: projection
          in: query
          schema:
              type: string
              default: details
          examples:
              details:
                  value: details
                  summary: details projection shows all fields

              info:
                  value: info
                  summary: this projections shows [ name counter  ]

              dataRef:
                  value: dataRef
                  summary: this projections shows [   ]

        - name: page
          in: query
          schema:
             type: integer
             default: 0
             format: int32
        - name: perpage
          in: query
          schema:
              type: integer
              default: 10
              format: int32
        - name: details
          in: query
          schema:
              type: string
              enum:
                  - details.name={yourname}

        - name: sortFields
          in: query
          schema:
              type: string
              enum:
                  - sortFields[0].fieldName=name&sortFields[0].ascending=oneOf{true, false}
                  - sortFields[0].fieldName=name&sortFields[0].descending=oneOf{true, false}
                  - sortFields[1].fieldName=counter&sortFields[1].ascending=oneOf{true, false}
                  - sortFields[1].fieldName=counter&sortFields[1].descending=oneOf{true, false}
      responses:
          '200':
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/IdCounterGeneratedResponse'

  /paramTargetValue-search-json:
    get:
      summary: 'get paramTargetValue instances by {searchMethod}'
      description: paramTargetValue instances are searchable by different search methods, which require different details
      operationId: 'get paramTargetValue instances by {searchMethod}'
      parameters:
        - name: searchMethod
          in: query
          required: true
          schema:
            type: string
            enum:
              - findAllParamTargetValues
              - findByParamEq
              - findByParamEq_TargetEq
              - findByParamEq_ValueEq
              - findByTargetEq
              - findByTargetEq_ValueEq
              - findByValueEq
        - name: projection
          in: query
          schema:
              type: string
              default: details
          examples:
              details:
                  value: details
                  summary: details projection shows all fields

              info:
                  value: info
                  summary: this projections shows [ param target value  ]

              dataRef:
                  value: dataRef
                  summary: this projections shows [   ]

        - name: page
          in: query
          schema:
             type: integer
             default: 0
             format: int32
        - name: perpage
          in: query
          schema:
              type: integer
              default: 10
              format: int32
        - name: details
          in: query
          schema:
              type: string
              enum:
                  - details.param={yourparam}

                  - details.target={yourtarget}

                  - details.value={yourvalue}

        - name: sortFields
          in: query
          schema:
              type: string
              enum:
                  - sortFields[0].fieldName=param&sortFields[0].ascending=oneOf{true, false}
                  - sortFields[0].fieldName=param&sortFields[0].descending=oneOf{true, false}
                  - sortFields[1].fieldName=target&sortFields[1].ascending=oneOf{true, false}
                  - sortFields[1].fieldName=target&sortFields[1].descending=oneOf{true, false}
                  - sortFields[2].fieldName=value&sortFields[2].ascending=oneOf{true, false}
                  - sortFields[2].fieldName=value&sortFields[2].descending=oneOf{true, false}
      responses:
          '200':
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ParamTargetValueGeneratedResponse'

  /tagValuePair-search-json:
    get:
      summary: 'get tagValuePair instances by {searchMethod}'
      description: tagValuePair instances are searchable by different search methods, which require different details
      operationId: 'get tagValuePair instances by {searchMethod}'
      parameters:
        - name: searchMethod
          in: query
          required: true
          schema:
            type: string
            enum:
              - findAllTagValuePairs
              - findByTagEq
              - findByTagEq_ValueEq
              - findByValueEq
        - name: projection
          in: query
          schema:
              type: string
              default: details
          examples:
              details:
                  value: details
                  summary: details projection shows all fields

              info:
                  value: info
                  summary: this projections shows [ tag value  ]

              dataRef:
                  value: dataRef
                  summary: this projections shows [   ]

        - name: page
          in: query
          schema:
             type: integer
             default: 0
             format: int32
        - name: perpage
          in: query
          schema:
              type: integer
              default: 10
              format: int32
        - name: details
          in: query
          schema:
              type: string
              enum:
                  - details.tag={yourtag}

                  - details.value={yourvalue}

        - name: sortFields
          in: query
          schema:
              type: string
              enum:
                  - sortFields[0].fieldName=tag&sortFields[0].ascending=oneOf{true, false}
                  - sortFields[0].fieldName=tag&sortFields[0].descending=oneOf{true, false}
                  - sortFields[1].fieldName=value&sortFields[1].ascending=oneOf{true, false}
                  - sortFields[1].fieldName=value&sortFields[1].descending=oneOf{true, false}
      responses:
          '200':
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/TagValuePairGeneratedResponse'

  /thumbnail-search-json:
    get:
      summary: 'get thumbnail instances by {searchMethod}'
      description: thumbnail instances are searchable by different search methods, which require different details
      operationId: 'get thumbnail instances by {searchMethod}'
      parameters:
        - name: searchMethod
          in: query
          required: true
          schema:
            type: string
            enum:
              - findAllThumbnails
              - findByNameEq
              - findByDepthEq
              - findByTargetNameEq
              - findByTargetTypeEq
              - findByThumbTypeEq
              - findByUriEq
              - findByUriEq_DepthEq
              - findByUriEq_TargetTypeEq
              - findByUriEq_ThumbTypeEq
        - name: projection
          in: query
          schema:
              type: string
              default: details
          examples:
              details:
                  value: details
                  summary: details projection shows all fields

              info:
                  value: info
                  summary: this projections shows [ name fullName uri depth thumbType targetType leftX topY  ]

              dataRef:
                  value: dataRef
                  summary: this projections shows [   ]

        - name: page
          in: query
          schema:
             type: integer
             default: 0
             format: int32
        - name: perpage
          in: query
          schema:
              type: integer
              default: 10
              format: int32
        - name: details
          in: query
          schema:
              type: string
              enum:
                  - details.name={yourname}

                  - details.depth={yourdepth}

                  - details.targetName={yourtargetName}

                  - details.targetType={yourtargetType}

                  - details.thumbType={yourthumbType}

                  - details.uri={youruri}

        - name: sortFields
          in: query
          schema:
              type: string
              enum:
                  - sortFields[0].fieldName=name&sortFields[0].ascending=oneOf{true, false}
                  - sortFields[0].fieldName=name&sortFields[0].descending=oneOf{true, false}
                  - sortFields[1].fieldName=fullName&sortFields[1].ascending=oneOf{true, false}
                  - sortFields[1].fieldName=fullName&sortFields[1].descending=oneOf{true, false}
                  - sortFields[2].fieldName=uri&sortFields[2].ascending=oneOf{true, false}
                  - sortFields[2].fieldName=uri&sortFields[2].descending=oneOf{true, false}
                  - sortFields[3].fieldName=depth&sortFields[3].ascending=oneOf{true, false}
                  - sortFields[3].fieldName=depth&sortFields[3].descending=oneOf{true, false}
                  - sortFields[4].fieldName=border&sortFields[4].ascending=oneOf{true, false}
                  - sortFields[4].fieldName=border&sortFields[4].descending=oneOf{true, false}
                  - sortFields[5].fieldName=thumbType&sortFields[5].ascending=oneOf{true, false}
                  - sortFields[5].fieldName=thumbType&sortFields[5].descending=oneOf{true, false}
                  - sortFields[6].fieldName=thumbName&sortFields[6].ascending=oneOf{true, false}
                  - sortFields[6].fieldName=thumbName&sortFields[6].descending=oneOf{true, false}
                  - sortFields[7].fieldName=targetType&sortFields[7].ascending=oneOf{true, false}
                  - sortFields[7].fieldName=targetType&sortFields[7].descending=oneOf{true, false}
                  - sortFields[8].fieldName=targetName&sortFields[8].ascending=oneOf{true, false}
                  - sortFields[8].fieldName=targetName&sortFields[8].descending=oneOf{true, false}
                  - sortFields[9].fieldName=targetId&sortFields[9].ascending=oneOf{true, false}
                  - sortFields[9].fieldName=targetId&sortFields[9].descending=oneOf{true, false}
                  - sortFields[10].fieldName=leftX&sortFields[10].ascending=oneOf{true, false}
                  - sortFields[10].fieldName=leftX&sortFields[10].descending=oneOf{true, false}
                  - sortFields[11].fieldName=topY&sortFields[11].ascending=oneOf{true, false}
                  - sortFields[11].fieldName=topY&sortFields[11].descending=oneOf{true, false}
                  - sortFields[12].fieldName=width&sortFields[12].ascending=oneOf{true, false}
                  - sortFields[12].fieldName=width&sortFields[12].descending=oneOf{true, false}
                  - sortFields[13].fieldName=height&sortFields[13].ascending=oneOf{true, false}
                  - sortFields[13].fieldName=height&sortFields[13].descending=oneOf{true, false}
                  - sortFields[14].fieldName=clickAction&sortFields[14].ascending=oneOf{true, false}
                  - sortFields[14].fieldName=clickAction&sortFields[14].descending=oneOf{true, false}
                  - sortFields[15].fieldName=hooverAction&sortFields[15].ascending=oneOf{true, false}
                  - sortFields[15].fieldName=hooverAction&sortFields[15].descending=oneOf{true, false}
      responses:
          '200':
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ThumbnailGeneratedResponse'

components:
    schemas:
        DataRef:
            type: object
            properties:
                className:
                    type: string
                classPrefix:
                    type: string
                componentName:
                    type: string
                dataRefLink:
                    type: string
                id:
                    type: number
                name:
                    type: string
                packName:
                    type: string
        DateLong:
            type: object
            properties:
                value:
                    type: string

        ExecutionGeneratedResponse:
            type: object
            properties:
                currentPage:
                    type: integer
                    format: int32
                rowsPerPage:
                    type: integer
                    format: int32
                numberOfPages:
                    type: integer
                    format: int32
                success:
                    type: boolean
                totalNumberOfItems:
                    type: integer
                    format: int32
                list:
                    type: array
                    items:
                        $ref: '#/components/schemas/ExecutionDetails'
        ExecutionDetails:
            type: object
            properties:
                name:
                    type: string
                component:
                    type: string
                element:
                    type: string
                packageName:
                    type: string

        IdCounterGeneratedResponse:
            type: object
            properties:
                currentPage:
                    type: integer
                    format: int32
                rowsPerPage:
                    type: integer
                    format: int32
                numberOfPages:
                    type: integer
                    format: int32
                success:
                    type: boolean
                totalNumberOfItems:
                    type: integer
                    format: int32
                list:
                    type: array
                    items:
                        $ref: '#/components/schemas/IdCounterDetails'
        IdCounterDetails:
            type: object
            properties:
                name:
                    type: string
                counter:
                    type: integer

        ParamTargetValueGeneratedResponse:
            type: object
            properties:
                currentPage:
                    type: integer
                    format: int32
                rowsPerPage:
                    type: integer
                    format: int32
                numberOfPages:
                    type: integer
                    format: int32
                success:
                    type: boolean
                totalNumberOfItems:
                    type: integer
                    format: int32
                list:
                    type: array
                    items:
                        $ref: '#/components/schemas/ParamTargetValueDetails'
        ParamTargetValueDetails:
            type: object
            properties:
                param:
                    type: string
                target:
                    type: string
                value:
                    type: string

        TagValuePairGeneratedResponse:
            type: object
            properties:
                currentPage:
                    type: integer
                    format: int32
                rowsPerPage:
                    type: integer
                    format: int32
                numberOfPages:
                    type: integer
                    format: int32
                success:
                    type: boolean
                totalNumberOfItems:
                    type: integer
                    format: int32
                list:
                    type: array
                    items:
                        $ref: '#/components/schemas/TagValuePairDetails'
        TagValuePairDetails:
            type: object
            properties:
                tag:
                    type: string
                value:
                    type: string

        ThumbnailGeneratedResponse:
            type: object
            properties:
                currentPage:
                    type: integer
                    format: int32
                rowsPerPage:
                    type: integer
                    format: int32
                numberOfPages:
                    type: integer
                    format: int32
                success:
                    type: boolean
                totalNumberOfItems:
                    type: integer
                    format: int32
                list:
                    type: array
                    items:
                        $ref: '#/components/schemas/ThumbnailDetails'
        ThumbnailDetails:
            type: object
            properties:
                name:
                    type: string
                fullName:
                    type: string
                uri:
                    type: string
                depth:
                    type: integer
                border:
                    type: integer
                thumbType:
                    type: string
                thumbName:
                    type: string
                targetType:
                    type: string
                targetName:
                    type: string
                targetId:
                    type: integer
                leftX:
                    type: integer
                topY:
                    type: integer
                width:
                    type: integer
                height:
                    type: integer
                clickAction:
                    type: string
                hooverAction:
                    type: string

