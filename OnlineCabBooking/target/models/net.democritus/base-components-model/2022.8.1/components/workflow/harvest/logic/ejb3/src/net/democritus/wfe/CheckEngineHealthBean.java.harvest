-- anchor:custom-imports:start
import net.democritus.sys.Context;
import net.democritus.workflow.EngineNodeExpiredNodeCleaner;
import net.democritus.workflow.ExpiredClaimCleaner;
import net.democritus.workflow.WorkflowInterruptRecoverer;
-- anchor:custom-imports:end
-- anchor:custom-postPerform:start
    try {
      expiredClaimCleaner.cleanExpiredClaims();
      engineNodeExpiredNodeCleaner.cleanExpiredNodes();
      workflowInterruptRecoverer.recoverInterruptedInstances();
      taskResult = TaskResult.success();
    } catch (Exception e) {
      logger.error("Workflow recovery failed", e);
      taskResult = TaskResult.error();
    }
-- anchor:custom-postPerform:end
-- anchor:custom-prePerform:start
    EngineNodeDetails engineNodeDetails = targetParameter.getValue();
    if (engineNodeDetails.getMaster() == null || !engineNodeDetails.getMaster()) {
      logger.error("Engine node must be master to execute health checks");
      return TaskResult.error();
    }

    logger.debug("Starting health checks...");
    Context context = targetParameter.getContext();

    EngineNodeExpiredNodeCleaner engineNodeExpiredNodeCleaner = new EngineNodeExpiredNodeCleaner(context);
    ExpiredClaimCleaner expiredClaimCleaner = new ExpiredClaimCleaner(context);

    WorkflowInterruptRecoverer workflowInterruptRecoverer = new WorkflowInterruptRecoverer(context);
    workflowInterruptRecoverer.setRecoverClaimingFlows(true);
    workflowInterruptRecoverer.setRecoverNonClaimingFlows(false);
-- anchor:custom-prePerform:end
