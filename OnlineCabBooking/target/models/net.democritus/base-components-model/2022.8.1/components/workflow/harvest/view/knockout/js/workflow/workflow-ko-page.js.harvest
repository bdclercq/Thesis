-- anchor:custom-before-applyBindings:start
        pageModel.enableAllEngines = function() {
            nsxActions.performElementCommand(engineServiceElement, "enableAllEngines", {})
                    .then(pageModel.baseModel.refresh);
        }
        pageModel.disableAllEngines = function() {
            nsxActions.performElementCommand(engineServiceElement, "disableAllEngines", {})
                    .then(pageModel.baseModel.refresh);
        }


        pageModel.engineServiceModel = createEngineServiceModel(workflowModel.selection);
        pageModel.stateTaskModel = createStateTaskModel(workflowModel.selection);
        pageModel.stateTimerModel = createStateTimerModel(workflowModel.selection);
        var selectedEngine;
        var selectedStatus = ko.observable('tbd');
        pageModel.engineServiceModel.listInteraction.selectRow = function(item) {
          selectedEngine = item;
          selectedStatus(item.status);
        }
        pageModel.engineServiceModel.startButtonVisible = ko.computed(function() {
            return selectedStatus() === 'stop' && pageModel.engineServiceModel.hasSelection();
        });
        pageModel.engineServiceModel.stopButtonVisible = ko.computed(function() {
            return selectedStatus() === 'start'  && pageModel.engineServiceModel.hasSelection();
        });
        pageModel.engineServiceModel.startEngine = function() {
          nsxActions.performTask(engineServiceElement, selectedEngine, '', '', 'start');
          pageModel.baseModel.refresh();
          selectedStatus('start');
        };
        pageModel.engineServiceModel.stopEngine = function() {
          nsxActions.performTask(engineServiceElement, selectedEngine, '', '', 'stop');
          pageModel.baseModel.refresh();
          selectedStatus('stop');
        };
-- anchor:custom-before-applyBindings:end
-- anchor:custom-script-head:start
    var nsxActions         = require('nsx/nsx-actions');

    var engineServiceElement = nsxApplication.getElement("workflow", "engineService");
    function createEngineServiceModel(selectedWorkflow) {
        return nsxViewModel.createDependentViewModel({
            element: engineServiceElement,
            parentElement: workflowElement,
            parentField: 'workflow',
            parent: selectedWorkflow,
            projection: "runningState"
        });
    }
    function createStateTaskModel(selectedWorkflow) {
        var stateTaskElement = nsxApplication.getElement("workflow", "stateTask");
        return nsxViewModel.createDependentViewModel({
            element: stateTaskElement,
            parentElement: workflowElement,
            parentField: 'workflow',
            parent: selectedWorkflow
        });
    }
    function createStateTimerModel(selectedWorkflow) {
        var stateTimerElement = nsxApplication.getElement("workflow", "stateTimer");
        return nsxViewModel.createDependentViewModel({
            element: stateTimerElement,
            parentElement: workflowElement,
            parentField: 'workflow',
            parent: selectedWorkflow
        });
    }
-- anchor:custom-script-head:end
