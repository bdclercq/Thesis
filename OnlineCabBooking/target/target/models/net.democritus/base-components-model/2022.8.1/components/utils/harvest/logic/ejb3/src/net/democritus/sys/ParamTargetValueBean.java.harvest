-- anchor:custom-imports:start
import static net.palver.util.Options.none;
import static net.palver.util.Options.some;
-- anchor:custom-imports:end
-- anchor:custom-methods:start
  /**
   * Retrieve a ParamTargetValue from the database using the provided FindByParamEq_TargetEq finder.
   * <p>
   * If the ParamTargetValue is not found, it will search with Target set to {@code "default"}.
   * If that is not found either, an empty string is returned.
   *
   * @param parameter the ParamTarget finder
   * @return ParamTarget's value, or empty string if none is found
   */
  public String getParamTargetValue(ParameterContext<ParamTargetValueFindByParamEq_TargetEqDetails> parameter) {
    {
      ParamTargetValueFindByParamEq_TargetEqDetails finder = parameter.getValue();
      SearchDetails<ParamTargetValueFindByParamEq_TargetEqDetails> searchDetails = SearchDetails.fetchNDetails(finder, 1);
      searchDetails.setSkipCount(true);
      SearchResult<ParamTargetValueDetails> searchResult = find(parameter.construct(searchDetails));
      Option<String> maybeValue = getValue(searchResult);
      if (maybeValue.isDefined()) {
        return maybeValue.getValue();
      }
    }

    {
      // recreate the finder to avoid modifying the state of the provided one
      ParamTargetValueFindByParamEq_TargetEqDetails defaultFinder = new ParamTargetValueFindByParamEq_TargetEqDetails();
      defaultFinder.setParam(parameter.getValue().getParam());
      defaultFinder.setTarget("default");

      SearchDetails<ParamTargetValueFindByParamEq_TargetEqDetails> searchDetails = SearchDetails.fetchNDetails(defaultFinder, 1);
      searchDetails.setSkipCount(true);
      SearchResult<ParamTargetValueDetails> searchResult = find(parameter.construct(searchDetails));
      Option<String> maybeValue = getValue(searchResult);
      if (maybeValue.isDefined()) {
        return maybeValue.getValue();
      }
    }

    if (logger.isDebugEnabled()) {
      logger.debug(
          "ParamTargetValue with parameter '" + parameter.getValue().getParam() + "' not found, returning \"\" instead"
      );
    }
    return "";
  }

  /**
   * Return ParamTarget value cast to boolean.
   * <p>
   * The value should be one of (case insensitive) {@code yes, no, true, false},
   * or empty string (converted to false).
   * <p>
   * If no value was found, the value is empty, or is not vild, the {@code defaultValue} is returned instead.
   *
   * @param parameter    ParamTargetValue finder
   * @param defaultValue the default value to use if no value was found
   * @return value converted to boolean
   */
  public boolean isParamTargetValueActive(ParameterContext<ParamTargetValueFindByParamEq_TargetEqDetails> parameter,
                                          boolean defaultValue) {
    String value = getParamTargetValue(parameter);
    if (value.isEmpty()) {
      return defaultValue;
    }
    if (value.equalsIgnoreCase("no") || value.equalsIgnoreCase("false")) {
      return false;
    }
    if (value.equalsIgnoreCase("yes") || value.equalsIgnoreCase("true")) {
      return true;
    }
    if (logger.isWarnEnabled()) {
      logger.warn("ParamTargetValue's value should be one of [yes, no, true, false, ''], got '" + value + "'." +
          " Returning defaultValue '" + defaultValue + "'.");
    }
    return defaultValue;
  }

  /**
   * Set a value of a ParamTargetValue element.
   * <p>
   * If a ParamTargetValue with specified ParamTarget doesn't exist, it is created, otherwise the value is updated.
   *
   * @param parameter the new value of ParamTargetValue
   * @return stateful update result
   */
  public CrudsResult<DataRef> setParamTargetValue(ParameterContext<ParamTargetValueDetails> parameter) {
    ParamTargetValueDetails newDetails = parameter.getValue();

    ParamTargetValueFindByParamEq_TargetEqDetails finder = new ParamTargetValueFindByParamEq_TargetEqDetails();
    finder.setParam(newDetails.getParam());
    finder.setTarget(newDetails.getTarget());
    SearchDetails<ParamTargetValueFindByParamEq_TargetEqDetails> searchDetails = SearchDetails.fetchNDetails(finder, 1);
    searchDetails.setSkipCount(true);
    SearchResult<ParamTargetValueDetails> searchResult = find(parameter.construct(searchDetails));
    if (searchResult.isError()) {
      return CrudsResult.error(searchResult.getDiagnostics());
    }

    if (searchResult.getTotalNumberOfItems() == 0) {
      return create(parameter.construct(newDetails));
    } else {
      ParamTargetValueDetails existingDetails = searchResult.getFirst().getValue();
      existingDetails.setValue(newDetails.getValue());

      return modify(parameter.construct(existingDetails));
    }
  }

  private Option<String> getValue(SearchResult<ParamTargetValueDetails> searchResult) {
    if (searchResult.getFirst().isDefined()) {
      ParamTargetValueDetails paramTargetValueDetails = searchResult.getFirst().getValue();
      String value = paramTargetValueDetails.getValue();
      return some(value != null ? value : "");
    } else {
      return none();
    }
  }
-- anchor:custom-methods:end
