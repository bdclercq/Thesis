-- anchor:custom-imports:start
import net.democritus.sys.BasicProcessingContext;
import net.democritus.sys.FlowOrchestrator;
import net.democritus.sys.FlowResult;
import net.democritus.sys.TaskResult;
import net.democritus.sys.FunctionTargetContext;
import net.democritus.sys.workflow.RunId;
import net.democritus.sys.BasicUserContext;
import net.democritus.usr.UserAgent;

import net.democritus.wfe.BatchProcessingContext;
import net.democritus.wfe.EngineNodeContext;
import net.democritus.wfe.EngineNodeContextRetriever;
import net.democritus.wfe.EngineServiceDetails;
import net.democritus.wfe.EngineServiceLocal;
import net.democritus.wfe.EngineServiceProcessingContext;
import net.democritus.wfe.WorkflowParameterContextFactory;

import java.util.stream.Collectors;
-- anchor:custom-imports:end
-- anchor:custom-variables:start
  @EJB
  private EngineServiceLocal engineServiceLocal;

  private static final SearchResultCacheProvider<WorkflowBean, WorkflowDetails> CACHE_PROVIDER = new SearchResultCacheProvider<>(
      (bean, ctx) -> {
        SearchDetails<WorkflowFindAllWorkflowsDetails> searchDetails = SearchDetails.fetchAllDetails(new WorkflowFindAllWorkflowsDetails());
        searchDetails.setSkipCount(true);
        return bean.find(ctx.withParameter(searchDetails));
      });
  private static final SearchResultCacheProvider<WorkflowBean, UserContext> responsibleUserContextCacheProvider = new SearchResultCacheProvider<>(
      (bean, ctx) -> {
        UserAgent userAgent = UserAgent.getUserAgent(ctx);
        List<UserContext> userContextList = CACHE_PROVIDER.getCache(bean, ctx).get().stream()
            .map(w -> w.getResponsible().getId())
            .distinct()
            .map(id -> userAgent.resolveDataRef(DataRef.withId(id)))
            .filter(CrudsResult::isSuccess)
            .map(CrudsResult::getValue)
            .map(BasicUserContext::new)
            .collect(Collectors.toList());
        return SearchResult.success(userContextList);
      }
  );
-- anchor:custom-variables:end
-- anchor:custom-methods:start
  @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
  public FlowResult<Void> runWorkflowWithEngineService(ParameterContext<DataRef> engineServiceParameter) {
    net.democritus.sys.Context baseContext = engineServiceParameter.getContext();

    ProjectionRef projectionRef = new ProjectionRef("details", engineServiceParameter.getValue());

    CrudsResult<EngineServiceDetails> crudsResult = engineServiceLocal.getProjection(engineServiceParameter.construct(projectionRef));
    if (crudsResult.isError()) {
      return FlowResult.error();
    }

    EngineServiceDetails engineServiceDetails = crudsResult.getValue();
    WorkflowDetails workflowDetails = getDetails(engineServiceDetails.getWorkflow());

    EngineNodeContext engineNodeContext = new EngineNodeContextRetriever(baseContext).retrieveEngineNodeContext();
    UserContext userContext = getResponsibleUserContext(baseContext.withParameter(workflowDetails));

    net.democritus.sys.Context context = baseContext
        .extend(engineNodeContext)
        .extend(userContext)
        .extend(new EngineServiceProcessingContext(engineServiceDetails.getDataRef()))
        .extend(new BasicProcessingContext("<no implementation>", engineServiceDetails.getName()));

    FlowOrchestrator<?, WorkflowDetails> flowOrchestrator = FlowOrchestratorLookup.getFlowOrchestrator(workflowDetails);
    engineServiceLocal.setLastRunAt(context
        .extend(new FunctionTargetContext(engineServiceDetails.getDataRef()))
        .withParameter(new Date()));
    FlowResult<?> flowResult = flowOrchestrator.orchestrate(context.withParameter(workflowDetails));
    if (flowResult.isError()) {
      logger.warn("Workflow '" + workflowDetails.getName() + "' failed when executing for engineService '" + engineServiceDetails.getName() + "'");
    }

    return (FlowResult<Void>) flowResult;
  }

  @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
  public FlowResult<Void> runWorkflowWithTargets(ParameterContext<DataRef> workflowParameter, List<DataRef> targetInstances) {
    net.democritus.sys.Context baseContext = workflowParameter.getContext();

    ProjectionRef projectionRef = new ProjectionRef("details", workflowParameter.getValue());

    CrudsResult<WorkflowDetails> crudsResult = getProjection(workflowParameter.construct(projectionRef));
    if (crudsResult.isError()) {
      return FlowResult.error();
    }

    WorkflowDetails workflowDetails = crudsResult.getValue();

    EngineNodeContext engineNodeContext = new EngineNodeContextRetriever(baseContext).retrieveEngineNodeContext();
    UserContext userContext = getResponsibleUserContext(baseContext.withParameter(workflowDetails));

    net.democritus.sys.Context context = baseContext
        .extend(engineNodeContext)
        .extend(userContext)
        .extend(new BatchProcessingContext(targetInstances))
        .extend(new BasicProcessingContext("<no implementation>", "<no engineService>"));

    FlowOrchestrator<?, WorkflowDetails> flowOrchestrator = FlowOrchestratorLookup.getFlowOrchestrator(workflowDetails);
    FlowResult<?> flowResult = flowOrchestrator.orchestrate(context.withParameter(workflowDetails));
    if (flowResult.isError()) {
      logger.warn("Workflow '" + workflowDetails.getName() + "' failed when executing for targets " + targetInstances);
    }

    return (FlowResult<Void>) flowResult;
  }

  @Override
  public TaskResult<Void> recoverWorkflow(ParameterContext<DataRef> workflowParameter) {
    net.democritus.sys.Context context = workflowParameter.getContext();
    ProjectionRef projectionRef = new ProjectionRef("details", workflowParameter.getValue());
    CrudsResult<WorkflowDetails> crudsResult = getProjection(context.withParameter(projectionRef));
    if (crudsResult.isError()) {
      return TaskResult.error(crudsResult.getDiagnostics());
    }

    WorkflowDetails details = crudsResult.getValue();
    WorkflowParameterContextFactory contextFactory = new WorkflowParameterContextFactory(context.withParameter(details), Collections.emptyList(), new RunId());
    contextFactory.init();
    net.democritus.sys.Context workflowContext = contextFactory.createContext(null).getContext();

    WorkflowInterruptRecoverer workflowInterruptRecoverer = new WorkflowInterruptRecoverer(workflowContext);
    workflowInterruptRecoverer.recover(details);
    return TaskResult.success();
  }

  @Override
  public CrudsResult<WorkflowDetails> getWorkflowById(ParameterContext<Long> workflowIdParameter) {
    return CACHE_PROVIDER.getCache(this, workflowIdParameter.getContext())
        .getInstance(w -> w.getId().equals(workflowIdParameter.getValue()));
  }

  @Override
  public UserContext getResponsibleUserContext(ParameterContext<WorkflowDetails> workflowDetailsParameter) {
    WorkflowDetails workflowDetails = workflowDetailsParameter.getValue();
    return responsibleUserContextCacheProvider.getCache(this, workflowDetailsParameter.getContext())
        .getInstance(e -> e.getId().equals(workflowDetails.getResponsible().getId()))
        .getValueOrElse(UserContext.NO_USER_CONTEXT);
  }
-- anchor:custom-methods:end
-- anchor:custom-postCreate:start
    CACHE_PROVIDER.expireCaches();
-- anchor:custom-postCreate:end
-- anchor:custom-postCreateOrModify:start
    CACHE_PROVIDER.expireCaches();
-- anchor:custom-postCreateOrModify:end
-- anchor:custom-postDelete:start
      CACHE_PROVIDER.expireCaches();
-- anchor:custom-postDelete:end
-- anchor:custom-postModify:start
    CACHE_PROVIDER.expireCaches();
-- anchor:custom-postModify:end
